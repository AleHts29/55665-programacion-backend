import { __awaiter, __generator, __read, __spread } from "tslib";
import { loadConfig } from "@aws-sdk/node-config-provider";
import { platform, release } from "os";
import { env, versions } from "process";
export var UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
export var UA_APP_ID_INI_NAME = "sdk-ua-app-id";
/**
 * Collect metrics from runtime to put into user agent.
 */
export var defaultUserAgent = function (_a) {
    var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
    var sections = [
        // sdk-metadata
        ["aws-sdk-js", clientVersion],
        // os-metadata
        ["os/" + platform(), release()],
        // language-metadata
        // ECMAScript edition doesn't matter in JS, so no version needed.
        ["lang/js"],
        ["md/nodejs", "" + versions.node],
    ];
    if (serviceId) {
        // api-metadata
        // service Id may not appear in non-AWS clients
        sections.push(["api/" + serviceId, clientVersion]);
    }
    if (env.AWS_EXECUTION_ENV) {
        // env-metadata
        sections.push(["exec-env/" + env.AWS_EXECUTION_ENV]);
    }
    var appIdPromise = loadConfig({
        environmentVariableSelector: function (env) { return env[UA_APP_ID_ENV_NAME]; },
        configFileSelector: function (profile) { return profile[UA_APP_ID_INI_NAME]; },
        default: undefined,
    })();
    var resolvedUserAgent = undefined;
    return function () { return __awaiter(void 0, void 0, void 0, function () {
        var appId;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!!resolvedUserAgent) return [3 /*break*/, 2];
                    return [4 /*yield*/, appIdPromise];
                case 1:
                    appId = _a.sent();
                    resolvedUserAgent = appId ? __spread(sections, [["app/" + appId]]) : __spread(sections);
                    _a.label = 2;
                case 2: return [2 /*return*/, resolvedUserAgent];
            }
        });
    }); };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUUzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUksQ0FBQztBQUN2QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUV4QyxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxtQkFBbUIsQ0FBQztBQUN0RCxNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBRyxlQUFlLENBQUM7QUFPbEQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxVQUFDLEVBQXFEO1FBQW5ELFNBQVMsZUFBQSxFQUFFLGFBQWEsbUJBQUE7SUFDekQsSUFBTSxRQUFRLEdBQWM7UUFDMUIsZUFBZTtRQUNmLENBQUMsWUFBWSxFQUFFLGFBQWEsQ0FBQztRQUM3QixjQUFjO1FBQ2QsQ0FBQyxRQUFNLFFBQVEsRUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQy9CLG9CQUFvQjtRQUNwQixpRUFBaUU7UUFDakUsQ0FBQyxTQUFTLENBQUM7UUFDWCxDQUFDLFdBQVcsRUFBRSxLQUFHLFFBQVEsQ0FBQyxJQUFNLENBQUM7S0FDbEMsQ0FBQztJQUVGLElBQUksU0FBUyxFQUFFO1FBQ2IsZUFBZTtRQUNmLCtDQUErQztRQUMvQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBTyxTQUFXLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQztLQUNwRDtJQUVELElBQUksR0FBRyxDQUFDLGlCQUFpQixFQUFFO1FBQ3pCLGVBQWU7UUFDZixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsY0FBWSxHQUFHLENBQUMsaUJBQW1CLENBQUMsQ0FBQyxDQUFDO0tBQ3REO0lBRUQsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFxQjtRQUNsRCwyQkFBMkIsRUFBRSxVQUFDLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUF2QixDQUF1QjtRQUM3RCxrQkFBa0IsRUFBRSxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxFQUEzQixDQUEyQjtRQUM1RCxPQUFPLEVBQUUsU0FBUztLQUNuQixDQUFDLEVBQUUsQ0FBQztJQUVMLElBQUksaUJBQWlCLEdBQTBCLFNBQVMsQ0FBQztJQUN6RCxPQUFPOzs7Ozt5QkFDRCxDQUFDLGlCQUFpQixFQUFsQix3QkFBa0I7b0JBQ04scUJBQU0sWUFBWSxFQUFBOztvQkFBMUIsS0FBSyxHQUFHLFNBQWtCO29CQUNoQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsQ0FBQyxVQUFLLFFBQVEsR0FBRSxDQUFDLFNBQU8sS0FBTyxDQUFDLEdBQUUsQ0FBQyxVQUFLLFFBQVEsQ0FBQyxDQUFDOzt3QkFFOUUsc0JBQU8saUJBQWlCLEVBQUM7OztTQUMxQixDQUFDO0FBQ0osQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9hZENvbmZpZyB9IGZyb20gXCJAYXdzLXNkay9ub2RlLWNvbmZpZy1wcm92aWRlclwiO1xuaW1wb3J0IHsgUHJvdmlkZXIsIFVzZXJBZ2VudCB9IGZyb20gXCJAYXdzLXNkay90eXBlc1wiO1xuaW1wb3J0IHsgcGxhdGZvcm0sIHJlbGVhc2UgfSBmcm9tIFwib3NcIjtcbmltcG9ydCB7IGVudiwgdmVyc2lvbnMgfSBmcm9tIFwicHJvY2Vzc1wiO1xuXG5leHBvcnQgY29uc3QgVUFfQVBQX0lEX0VOVl9OQU1FID0gXCJBV1NfU0RLX1VBX0FQUF9JRFwiO1xuZXhwb3J0IGNvbnN0IFVBX0FQUF9JRF9JTklfTkFNRSA9IFwic2RrLXVhLWFwcC1pZFwiO1xuXG5pbnRlcmZhY2UgRGVmYXVsdFVzZXJBZ2VudE9wdGlvbnMge1xuICBzZXJ2aWNlSWQ/OiBzdHJpbmc7XG4gIGNsaWVudFZlcnNpb246IHN0cmluZztcbn1cblxuLyoqXG4gKiBDb2xsZWN0IG1ldHJpY3MgZnJvbSBydW50aW1lIHRvIHB1dCBpbnRvIHVzZXIgYWdlbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBkZWZhdWx0VXNlckFnZW50ID0gKHsgc2VydmljZUlkLCBjbGllbnRWZXJzaW9uIH06IERlZmF1bHRVc2VyQWdlbnRPcHRpb25zKTogUHJvdmlkZXI8VXNlckFnZW50PiA9PiB7XG4gIGNvbnN0IHNlY3Rpb25zOiBVc2VyQWdlbnQgPSBbXG4gICAgLy8gc2RrLW1ldGFkYXRhXG4gICAgW1wiYXdzLXNkay1qc1wiLCBjbGllbnRWZXJzaW9uXSxcbiAgICAvLyBvcy1tZXRhZGF0YVxuICAgIFtgb3MvJHtwbGF0Zm9ybSgpfWAsIHJlbGVhc2UoKV0sXG4gICAgLy8gbGFuZ3VhZ2UtbWV0YWRhdGFcbiAgICAvLyBFQ01BU2NyaXB0IGVkaXRpb24gZG9lc24ndCBtYXR0ZXIgaW4gSlMsIHNvIG5vIHZlcnNpb24gbmVlZGVkLlxuICAgIFtcImxhbmcvanNcIl0sXG4gICAgW1wibWQvbm9kZWpzXCIsIGAke3ZlcnNpb25zLm5vZGV9YF0sXG4gIF07XG5cbiAgaWYgKHNlcnZpY2VJZCkge1xuICAgIC8vIGFwaS1tZXRhZGF0YVxuICAgIC8vIHNlcnZpY2UgSWQgbWF5IG5vdCBhcHBlYXIgaW4gbm9uLUFXUyBjbGllbnRzXG4gICAgc2VjdGlvbnMucHVzaChbYGFwaS8ke3NlcnZpY2VJZH1gLCBjbGllbnRWZXJzaW9uXSk7XG4gIH1cblxuICBpZiAoZW52LkFXU19FWEVDVVRJT05fRU5WKSB7XG4gICAgLy8gZW52LW1ldGFkYXRhXG4gICAgc2VjdGlvbnMucHVzaChbYGV4ZWMtZW52LyR7ZW52LkFXU19FWEVDVVRJT05fRU5WfWBdKTtcbiAgfVxuXG4gIGNvbnN0IGFwcElkUHJvbWlzZSA9IGxvYWRDb25maWc8c3RyaW5nIHwgdW5kZWZpbmVkPih7XG4gICAgZW52aXJvbm1lbnRWYXJpYWJsZVNlbGVjdG9yOiAoZW52KSA9PiBlbnZbVUFfQVBQX0lEX0VOVl9OQU1FXSxcbiAgICBjb25maWdGaWxlU2VsZWN0b3I6IChwcm9maWxlKSA9PiBwcm9maWxlW1VBX0FQUF9JRF9JTklfTkFNRV0sXG4gICAgZGVmYXVsdDogdW5kZWZpbmVkLFxuICB9KSgpO1xuXG4gIGxldCByZXNvbHZlZFVzZXJBZ2VudDogVXNlckFnZW50IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuICByZXR1cm4gYXN5bmMgKCkgPT4ge1xuICAgIGlmICghcmVzb2x2ZWRVc2VyQWdlbnQpIHtcbiAgICAgIGNvbnN0IGFwcElkID0gYXdhaXQgYXBwSWRQcm9taXNlO1xuICAgICAgcmVzb2x2ZWRVc2VyQWdlbnQgPSBhcHBJZCA/IFsuLi5zZWN0aW9ucywgW2BhcHAvJHthcHBJZH1gXV0gOiBbLi4uc2VjdGlvbnNdO1xuICAgIH1cbiAgICByZXR1cm4gcmVzb2x2ZWRVc2VyQWdlbnQ7XG4gIH07XG59O1xuIl19